import { ExtendedFormArray, ExtendedFormControl, ExtendedFormGroup } from './form-controls';
export class AbstractField {
    constructor(options) {
        this.validatorOrOpts = options.validatorOrOpts;
        this.asyncValidator = options.asyncValidator;
        this.key = options.key;
        this.order = options.order;
        this.initialValue = options.initialValue;
        this.validationMessages = options.validationMessages;
        this.relatedFields = options.relatedFields;
        this.class = options.class;
        this.checkChanges = options.checkChanges;
        this.autofocus = options.autofocus;
        this.data = options.data;
        this.formControl = ExtendedFormControl;
        this.ignore = options.ignore;
    }
}
export class ControlField extends AbstractField {
    constructor(options) {
        super(options);
        if (typeof options.label === 'function') {
            this.labelFn = options.label;
        }
        else {
            this.labelString = options.label;
        }
        this.tooltip = options.tooltip;
        this.placeholder = options.placeholder;
        this.minLength = options.minLength;
        this.maxLength = options.maxLength;
        this.formControl = ExtendedFormControl;
    }
    label(form) {
        if (this.labelFn) {
            return this.labelFn(form.value);
        }
        return this.labelString;
    }
}
export class GroupField extends AbstractField {
    constructor(options) {
        super(options);
        this.configs = options.configs;
        this.formControl = ExtendedFormGroup;
    }
}
export class ArrayField extends AbstractField {
    constructor(options) {
        super(options);
        this.configs = options.configs;
        this.formControl = ExtendedFormArray;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5maWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2R5bmFtaWMtZm9ybS9zcmMvbGliL2Jhc2UuZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFXNUYsTUFBTSxPQUFPLGFBQWE7SUFnQnhCLFlBQVksT0FBK0I7UUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO1FBQy9DLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUM3QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDL0IsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLFlBQWEsU0FBUSxhQUFhO0lBUzdDLFlBQVksT0FBOEI7UUFDeEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWYsSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUM7SUFDekMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFxQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sSUFBSSxDQUFDLFdBQWtCLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLFVBQVcsU0FBUSxhQUFhO0lBRzNDLFlBQVksT0FBNEI7UUFDdEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsaUJBQWlCLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLFVBQVcsU0FBUSxhQUFhO0lBRzNDLFlBQVksT0FBNEI7UUFDdEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsaUJBQWlCLENBQUM7SUFDdkMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBBYnN0cmFjdENvbnRyb2xPcHRpb25zLCBBc3luY1ZhbGlkYXRvckZuLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvbk1lc3NhZ2VzIH0gZnJvbSAnLi9keW5hbWljLWZvcm0uY29uZmlnJztcclxuaW1wb3J0IHsgRXh0ZW5kZWRGb3JtQXJyYXksIEV4dGVuZGVkRm9ybUNvbnRyb2wsIEV4dGVuZGVkRm9ybUdyb3VwIH0gZnJvbSAnLi9mb3JtLWNvbnRyb2xzJztcclxuaW1wb3J0IHtcclxuICBBYnN0cmFjdEZpZWxkSW50ZXJmYWNlLCBBcnJheUZpZWxkSW50ZXJmYWNlLFxyXG4gIENvbnRyb2xGaWVsZEludGVyZmFjZSxcclxuICBHcm91cEZpZWxkSW50ZXJmYWNlLFxyXG4gIFJlbGF0ZWRGaWVsZEludGVyZmFjZVxyXG59IGZyb20gJy4vaW50ZXJmYWNlcy9maWVsZC1jb25maWcuaW50ZXJmYWNlJztcclxuXHJcbmV4cG9ydCB0eXBlIE5ld0Zvcm1Db250cm9sID0gbmV3ICguLi5wYXJhbXM6IGFueSkgPT4gRXh0ZW5kZWRGb3JtQ29udHJvbCB8IEV4dGVuZGVkRm9ybUFycmF5IHwgRXh0ZW5kZWRGb3JtR3JvdXA7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEFic3RyYWN0RmllbGQgaW1wbGVtZW50cyBBYnN0cmFjdEZpZWxkSW50ZXJmYWNlIHtcclxuICBwdWJsaWMgZm9ybUNvbnRyb2w6IE5ld0Zvcm1Db250cm9sO1xyXG4gIHB1YmxpYyB2YWxpZGF0b3JPck9wdHM/OiBWYWxpZGF0b3JGbiB8IFZhbGlkYXRvckZuW10gfCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIHwgbnVsbDtcclxuICBwdWJsaWMgYXN5bmNWYWxpZGF0b3I/OiBBc3luY1ZhbGlkYXRvckZuIHwgQXN5bmNWYWxpZGF0b3JGbltdIHwgbnVsbDtcclxuICBwdWJsaWMga2V5OiBzdHJpbmc7XHJcbiAgcHVibGljIG9yZGVyOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgcHVibGljIGludGVybmFsT3JkZXI/OiBudW1iZXI7XHJcbiAgcHVibGljIGluaXRpYWxWYWx1ZT86IGFueTtcclxuICBwdWJsaWMgdmFsaWRhdGlvbk1lc3NhZ2VzPzogVmFsaWRhdGlvbk1lc3NhZ2VzO1xyXG4gIHB1YmxpYyByZWxhdGVkRmllbGRzPzogUmVsYXRlZEZpZWxkSW50ZXJmYWNlW107XHJcbiAgcHVibGljIGNsYXNzPzogc3RyaW5nO1xyXG4gIHB1YmxpYyBjaGVja0NoYW5nZXM/OiAoY3VycmVudFZhbHVlOiBhbnksIGRlZmF1bHRWYWx1ZTogYW55KSA9PiBib29sZWFuO1xyXG4gIHB1YmxpYyBhdXRvZm9jdXM/OiBib29sZWFuO1xyXG4gIHB1YmxpYyBkYXRhPzogYW55O1xyXG4gIHB1YmxpYyBpZ25vcmU/OiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBBYnN0cmFjdEZpZWxkSW50ZXJmYWNlKSB7XHJcbiAgICB0aGlzLnZhbGlkYXRvck9yT3B0cyA9IG9wdGlvbnMudmFsaWRhdG9yT3JPcHRzO1xyXG4gICAgdGhpcy5hc3luY1ZhbGlkYXRvciA9IG9wdGlvbnMuYXN5bmNWYWxpZGF0b3I7XHJcbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xyXG4gICAgdGhpcy5vcmRlciA9IG9wdGlvbnMub3JkZXI7XHJcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IG9wdGlvbnMuaW5pdGlhbFZhbHVlO1xyXG4gICAgdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMgPSBvcHRpb25zLnZhbGlkYXRpb25NZXNzYWdlcztcclxuICAgIHRoaXMucmVsYXRlZEZpZWxkcyA9IG9wdGlvbnMucmVsYXRlZEZpZWxkcztcclxuICAgIHRoaXMuY2xhc3MgPSBvcHRpb25zLmNsYXNzO1xyXG4gICAgdGhpcy5jaGVja0NoYW5nZXMgPSBvcHRpb25zLmNoZWNrQ2hhbmdlcztcclxuICAgIHRoaXMuYXV0b2ZvY3VzID0gb3B0aW9ucy5hdXRvZm9jdXM7XHJcbiAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XHJcbiAgICB0aGlzLmZvcm1Db250cm9sID0gRXh0ZW5kZWRGb3JtQ29udHJvbDtcclxuICAgIHRoaXMuaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xGaWVsZCBleHRlbmRzIEFic3RyYWN0RmllbGQgaW1wbGVtZW50cyBDb250cm9sRmllbGRJbnRlcmZhY2Uge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGFiZWxGbj86IChmb3JtOiBBYnN0cmFjdENvbnRyb2wpID0+IHN0cmluZztcclxuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsU3RyaW5nPzogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgdG9vbHRpcD86IHN0cmluZztcclxuICBwdWJsaWMgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgcHVibGljIG1pbkxlbmd0aD86IG51bWJlcjtcclxuICBwdWJsaWMgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBDb250cm9sRmllbGRJbnRlcmZhY2UpIHtcclxuICAgIHN1cGVyKG9wdGlvbnMpO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aGlzLmxhYmVsRm4gPSBvcHRpb25zLmxhYmVsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5sYWJlbFN0cmluZyA9IG9wdGlvbnMubGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50b29sdGlwID0gb3B0aW9ucy50b29sdGlwO1xyXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XHJcbiAgICB0aGlzLm1pbkxlbmd0aCA9IG9wdGlvbnMubWluTGVuZ3RoO1xyXG4gICAgdGhpcy5tYXhMZW5ndGggPSBvcHRpb25zLm1heExlbmd0aDtcclxuICAgIHRoaXMuZm9ybUNvbnRyb2wgPSBFeHRlbmRlZEZvcm1Db250cm9sO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxhYmVsKGZvcm06IEFic3RyYWN0Q29udHJvbCk6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5sYWJlbEZuKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsRm4oZm9ybS52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMubGFiZWxTdHJpbmcgYXMgYW55O1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHcm91cEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RGaWVsZCBpbXBsZW1lbnRzIEdyb3VwRmllbGRJbnRlcmZhY2Uge1xyXG4gIHB1YmxpYyBjb25maWdzOiBBcnJheTxBYnN0cmFjdEZpZWxkPjtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogR3JvdXBGaWVsZEludGVyZmFjZSkge1xyXG4gICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICB0aGlzLmNvbmZpZ3MgPSBvcHRpb25zLmNvbmZpZ3M7XHJcbiAgICB0aGlzLmZvcm1Db250cm9sID0gRXh0ZW5kZWRGb3JtR3JvdXA7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEFycmF5RmllbGQgZXh0ZW5kcyBBYnN0cmFjdEZpZWxkIGltcGxlbWVudHMgQXJyYXlGaWVsZEludGVyZmFjZSB7XHJcbiAgcHVibGljIGNvbmZpZ3M6IEFic3RyYWN0RmllbGQgfCAoKHZhbHVlKSA9PiBBYnN0cmFjdEZpZWxkKTtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogQXJyYXlGaWVsZEludGVyZmFjZSkge1xyXG4gICAgc3VwZXIob3B0aW9ucylcclxuICAgIHRoaXMuY29uZmlncyA9IG9wdGlvbnMuY29uZmlncztcclxuICAgIHRoaXMuZm9ybUNvbnRyb2wgPSBFeHRlbmRlZEZvcm1BcnJheTtcclxuICB9XHJcbn1cclxuIl19