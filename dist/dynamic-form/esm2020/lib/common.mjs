import { DefaultIterableDiffer } from '@angular/core';
import { of } from 'rxjs';
import { mergeAll, pairwise } from 'rxjs/operators';
import { ArrayField, GroupField } from './base.field';
import { ExtendedFormArray, ExtendedFormGroup } from './form-controls';
function isNullConfig(config) {
    return config === null || config === undefined || !config;
}
export function createDynamicForm(configList, validatorOrOpts, asyncValidator) {
    const form = new ExtendedFormGroup({}, validatorOrOpts, asyncValidator);
    form.pathFromRoot = '';
    configList.forEach((config, index) => {
        if (isNullConfig(config)) {
            return;
        }
        config.internalOrder = config.hasOwnProperty('order') ? config.order : index;
        const control = debouncer(config, form.pathFromRoot, form);
        addControl(form, control, config, form);
        postProcess(control, config, form);
    });
    form.updateChildrenControls();
    return form;
}
function createFormControl(config, parentPath) {
    const control = Reflect.construct(config.formControl, [
        config.initialValue,
        config.validatorOrOpts,
        config.asyncValidator,
    ]);
    control.pathFromRoot = joinPath(parentPath, config.key);
    return control;
}
function createFormGroupControl(config, parentPath, rootForm) {
    const parent = new ExtendedFormGroup({}, config.validatorOrOpts, config.asyncValidator);
    parent.pathFromRoot = joinPath(parentPath, config.key);
    config.configs.forEach((configChild, index) => {
        if (isNullConfig(configChild)) {
            return;
        }
        configChild.internalOrder = configChild.hasOwnProperty('order') ? configChild.order : index;
        const control = debouncer(configChild, parent.pathFromRoot, rootForm);
        addControl(parent, control, configChild, rootForm);
        postProcess(control, configChild, rootForm);
    });
    parent.updateChildrenControls();
    return parent;
}
function createFormArrayControl(config, parentPath, rootForm) {
    const parent = new ExtendedFormArray((value) => {
        let fabricConfig;
        if (typeof config.configs === 'function') {
            fabricConfig = config.configs(value);
        }
        else {
            fabricConfig = config.configs;
        }
        if (isNullConfig(fabricConfig)) {
            return null;
        }
        const control = debouncer(fabricConfig, parent.pathFromRoot, rootForm);
        control.fieldConfig = fabricConfig;
        postProcess(control, config, rootForm);
        return control;
    }, config.validatorOrOpts, config.asyncValidator);
    parent.pathFromRoot = joinPath(parentPath, config.key);
    return parent;
}
function debouncer(config, parentPath, rootForm) {
    if (config instanceof GroupField) {
        return createFormGroupControl(config, parentPath, rootForm);
    }
    else if (config instanceof ArrayField) {
        return createFormArrayControl(config, parentPath, rootForm);
    }
    return createFormControl(config, parentPath);
}
function postProcess(control, config, rootForm) {
    const relatedFields = config.relatedFields;
    if (!relatedFields) {
        return;
    }
    const initValueStr = config.initialValue instanceof Object ? config.initialValue.value : config.initialValue;
    const differ = new DefaultIterableDiffer(trackByItem);
    of(of(initValueStr), control.valueChanges).pipe(mergeAll(), pairwise()).subscribe((controlValues) => {
        const nextFieldsState = relatedFields.filter(v => controlIsVisible(v, controlValues, control));
        const diff = differ.diff(nextFieldsState);
        if (!diff) {
            return;
        }
        diff.forEachRemovedItem(v => {
            let relatedFieldConfig = v.item.configs;
            if (typeof relatedFieldConfig === 'function') {
                relatedFieldConfig = relatedFieldConfig(controlValues[1], controlValues[0], control);
            }
            removeControls(relatedFieldConfig, control.parent);
        });
        diff.forEachAddedItem(v => {
            let relatedFieldConfig = v.item.configs;
            if (typeof relatedFieldConfig === 'function') {
                relatedFieldConfig = relatedFieldConfig(controlValues[0], controlValues[1], control);
            }
            relatedFieldConfig.forEach((childConfig, index) => {
                if (isNullConfig(childConfig)) {
                    return;
                }
                childConfig.internalOrder = childConfig.hasOwnProperty('order') ? childConfig.order : index;
                const childControl = debouncer(childConfig, control.parent.pathFromRoot, rootForm);
                if (control.parent.lastPatchedValue && control.parent.lastPatchedValue[childConfig.key]) {
                    childControl.patchValue(control.parent.lastPatchedValue[childConfig.key], { emitEvent: false, useAsDefault: control.parent.defaultValuePatched });
                }
                addControl(control.parent, childControl, childConfig, rootForm);
                postProcess(childControl, childConfig, rootForm);
            });
        });
        control.parent.updateChildrenControls();
    });
}
function trackByItem(index, item) {
    return item;
}
function addControl(parent, control, config, rootForm) {
    control.fieldConfig = config;
    parent.addControl(config.key, control, { emitEvent: false });
    if (rootForm.supposeControls.has(control.pathFromRoot)) {
        // @ts-ignore
        rootForm.supposeControls.get(control.pathFromRoot).next(control);
    }
}
function removeControls(configs, parent) {
    configs.forEach(config => {
        if (parent.contains(config.key)) {
            parent.removeControl(config.key, { emitEvent: false });
            if (config.relatedFields) {
                config.relatedFields.forEach((c) => removeControls(c.configs, parent));
            }
        }
    });
}
function controlIsVisible(config, controlValues, control) {
    const prevControlValue = controlValues[0];
    const controlValue = controlValues[1];
    switch (typeof config.checkVisibility) {
        case 'function': {
            // @ts-ignore
            return config.checkVisibility(controlValue, prevControlValue, control);
        }
    }
    return false;
}
function joinPath(a, b) {
    if (a !== '') {
        return `${a}.${b}`;
    }
    return b;
}
//# sourceMappingURL=data:application/json;base64,