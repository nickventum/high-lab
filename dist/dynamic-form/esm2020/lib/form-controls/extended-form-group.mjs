import { FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import { filter, map, startWith } from 'rxjs/operators';
import { CommonHelper, RandomHelper } from '../helpers';
export class ExtendedFormGroup extends FormGroup {
    constructor() {
        super(...arguments);
        this.supposeControls = new Map();
        this.id = RandomHelper.NumId;
        this.defaultValidationMessages = {};
        this.defaultValuePatched = false;
        this.childrenControls = [];
        this.error = this.statusChanges.pipe(startWith(false), map(() => CommonHelper.instantError(this, true)));
        this.errorObject = this.statusChanges.pipe(startWith(false), map(() => CommonHelper.instantError(this, false)));
    }
    get canShowError() {
        return this.invalid && (this.touched || this.dirty);
    }
    get isChangedByUser() {
        if (this.fieldConfig && typeof this.fieldConfig.checkChanges === 'function') {
            return this.fieldConfig.checkChanges(this.value, this.defaultValuePatched);
        }
        for (const control of Object.values(this.controls)) {
            if (control.isChangedByUser) {
                return true;
            }
        }
        return false;
    }
    get(path) {
        return super.get(path);
    }
    patchValue(value, options = {}) {
        if (value == null /* both `null` and `undefined` */) {
            return;
        }
        if (options.useAsDefault) {
            this.defaultValuePatched = true;
        }
        Object.keys(value).forEach(name => {
            if (this.controls[name]) {
                this.controls[name].patchValue(value[name], { ...options, onlySelf: true });
            }
        });
        this.updateValueAndValidity(options);
        this.lastPatchedValue = value;
    }
    validate(scrollToError = true) {
        this.markAllAsTouched();
        this.updateValueAndValidity({ onlySelf: true });
        if (scrollToError && this.invalid) {
            this.scrollToError();
        }
        return this.valid;
    }
    resetDefaultValue() {
        this.defaultValuePatched = false;
        Object.values(this.controls).forEach(control => control.resetDefaultValue());
    }
    resetToDefaultValue(options = {}) {
        Object.values(this.controls).forEach(control => control.resetToDefaultValue({ ...options, onlySelf: true }));
        this.updateValueAndValidity();
    }
    scrollToError() {
        const invalidControl = CommonHelper.getFirstInvalidControl(this);
        if (invalidControl) {
            invalidControl.htmlInstance.scrollIntoView({ behavior: 'smooth' });
        }
    }
    updateChildrenControls() {
        this.childrenControls = Object.values(this.controls);
        this.childrenControls.sort((a, b) => {
            if (a.fieldConfig.internalOrder < b.fieldConfig.internalOrder) {
                return -1;
            }
            else if (a.fieldConfig.internalOrder > b.fieldConfig.internalOrder) {
                return 1;
            }
            return 0;
        });
    }
    getControl(path) {
        const pathStr = this.pathFromRoot + path.join('.');
        const root = this.root;
        if (!root.supposeControls.has(pathStr)) {
            root.supposeControls.set(pathStr, new Subject());
        }
        const subject = root.supposeControls.get(pathStr);
        return subject.pipe(filter(v => !!v));
    }
    getRawValue(params = { ignoredFields: false }) {
        return this.childrenControls.reduce((acc, control) => {
            if (!control.fieldConfig.ignore || params.ignoredFields) {
                acc[control.fieldConfig.key] = control.getRawValue(params);
            }
            return acc;
        }, {});
    }
}
//# sourceMappingURL=data:application/json;base64,