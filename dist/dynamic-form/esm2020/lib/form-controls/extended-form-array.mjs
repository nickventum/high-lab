import { FormArray } from '@angular/forms';
import { map, startWith } from 'rxjs/operators';
import { CommonHelper, RandomHelper } from '../helpers';
export class ExtendedFormArray extends FormArray {
    constructor(formGroupFabric, validatorOrOpts, asyncValidator) {
        super([], validatorOrOpts, asyncValidator);
        this.formGroupFabric = formGroupFabric;
        this.id = RandomHelper.NumId;
        this.canAddRow = true;
        this.defaultValuePatched = false;
        this.error = this.statusChanges.pipe(startWith(false), map(() => CommonHelper.instantError(this, true)));
        this.errorObject = this.statusChanges.pipe(startWith(false), map(() => CommonHelper.instantError(this, false)));
    }
    get childrenControls() {
        return this.controls;
    }
    ;
    get(path) {
        return super.get(path);
    }
    get canShowError() {
        return this.invalid && (this.touched || this.dirty);
    }
    get isChangedByUser() {
        if (this.fieldConfig && typeof this.fieldConfig.checkChanges === 'function') {
            return this.fieldConfig.checkChanges(this.value, this.defaultValuePatched);
        }
        return this.controls.some(control => control.isChangedByUser);
    }
    patchValue(value, options = {}) {
        if (!Array.isArray(value)) {
            return;
        }
        if (options.useAsDefault) {
            this.defaultValuePatched = true;
        }
        this.removeAllControls();
        for (let i = this.controls.length; i < value.length; i++) {
            this.addControl(value[i]);
        }
        value.forEach(((newValue, index) => {
            if (this.at(index)) {
                this.at(index).patchValue(newValue, { ...options, onlySelf: true });
            }
        }));
        this.updateValueAndValidity(options);
        this.lastPatchedValue = value;
    }
    validate(scrollToError = false) {
        this.markAllAsTouched();
        this.updateValueAndValidity({ onlySelf: true });
        if (scrollToError && this.invalid) {
            this.scrollToError();
        }
        return this.valid;
    }
    scrollToError() {
        const invalidControl = CommonHelper.getFirstInvalidControl(this);
        if (invalidControl) {
            invalidControl.htmlInstance.scrollIntoView({ behavior: 'smooth' });
        }
    }
    resetDefaultValue() {
        this.defaultValuePatched = false;
        this.controls.forEach(control => control.resetDefaultValue());
    }
    resetToDefaultValue(options = {}) {
        if (!this.defaultValuePatched) {
            return;
        }
        if (Array.isArray(this.lastPatchedValue)) {
            this.removeAllControls();
            for (let i = this.controls.length; i < this.lastPatchedValue.length; i++) {
                this.addControl(this.lastPatchedValue[i]);
            }
            this.controls.forEach((control, index) => {
                control.patchValue(this.lastPatchedValue[index], { onlySelf: true, useAsDefault: true, ...options });
            });
            this.updateValueAndValidity({ onlySelf: true });
        }
    }
    updateChildrenControls() { }
    addControl(value) {
        const control = this.formGroupFabric(value);
        if (!control) {
            return;
        }
        if (this.disabled) {
            control.disable({ emitEvent: false });
        }
        this.push(control);
        return control;
    }
    removeControl(index) {
        this.removeAt(index);
    }
    enableAllControlByKey(key) {
        // @ts-ignore
        this.controls.forEach(control => control.get(key).enable());
    }
    removeAllControls() {
        while (this.controls.length !== 0) {
            this.removeAt(0);
        }
    }
    getRawValue(params = { ignoredFields: false }) {
        return this.childrenControls.reduce((acc, control) => {
            if (!control.fieldConfig.ignore || params.ignoredFields) {
                acc.push(control.getRawValue(params));
            }
            return acc;
        }, []);
    }
}
//# sourceMappingURL=data:application/json;base64,