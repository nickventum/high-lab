import { Observable } from 'rxjs';
function empty(v) {
    return v === '' || (Array.isArray(v) && v.length === 0) || v === undefined || v === null || (typeof v === 'object' && Object.keys(v).length === 0);
}
export class LoadingProgress {
    constructor(isLoaded = false, isSuccess = false, isFailure = false, data, failureConfig) {
        this.isLoaded = isLoaded;
        this.isSuccess = isSuccess;
        this.isFailure = isFailure;
        this.failureConfig = failureConfig;
        if (this.hasPagination(data)) {
            this.data = data.data;
            this.pagination = data.pagination;
        }
        else {
            this.data = data;
        }
        this.isEmptyData = empty(this.data);
    }
    static fromData(value) {
        return new LoadingProgress(true, true, false, value);
    }
    get isLoading() {
        return !this.isLoaded;
    }
    clone(params = {}) {
        return new LoadingProgress(params.isLoaded || this.isLoaded, params.isSuccess || this.isSuccess, params.isFailure || this.isFailure, params.data, params.failureConfig || this.failureConfig);
    }
    hasPagination(data) {
        return data !== null && typeof data === 'object' && data.hasOwnProperty('pagination');
    }
}
export const dataLoading = (callback, failureConfig) => (source) => {
    const tryCallCallback = (loadingProgress) => {
        if (typeof callback === 'function') {
            callback(loadingProgress);
        }
    };
    tryCallCallback(new LoadingProgress(false, false, false));
    return new Observable(observer => {
        return source.subscribe(v => {
            tryCallCallback(new LoadingProgress(true, true, false, v));
            observer.next(v);
        }, err => {
            tryCallCallback(new LoadingProgress(true, false, true, null, failureConfig));
            observer.error(err);
        }, () => {
            observer.complete();
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1sb2FkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2RhdGEtbG9hZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBdUJsQyxTQUFTLEtBQUssQ0FBQyxDQUFNO0lBQ2pCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdkosQ0FBQztBQUVELE1BQU0sT0FBTyxlQUFlO0lBYXhCLFlBQ1csV0FBb0IsS0FBSyxFQUN6QixZQUFxQixLQUFLLEVBQzFCLFlBQXFCLEtBQUssRUFDakMsSUFBUSxFQUNELGFBQTZCO1FBSjdCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBQzFCLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBRTFCLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUVwQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBVyxDQUFDO1lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNyQzthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFXLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQTNCTSxNQUFNLENBQUMsUUFBUSxDQUFJLEtBQVE7UUFDOUIsT0FBTyxJQUFJLGVBQWUsQ0FBSSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzFCLENBQUM7SUF1Qk0sS0FBSyxDQUFJLFNBTVosRUFBUztRQUNULE9BQU8sSUFBSSxlQUFlLENBQ3RCLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFDaEMsTUFBTSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUNsQyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQ2xDLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUM3QyxDQUFDO0lBQ04sQ0FBQztJQUVPLGFBQWEsQ0FBQyxJQUFvQjtRQUN0QyxPQUFPLElBQUksS0FBSyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUYsQ0FBQztDQUNKO0FBRUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3ZCLFFBQXVELEVBQ3ZELGFBQTZCLEVBQy9CLEVBQUUsQ0FBQyxDQUFDLE1BQXFCLEVBQUUsRUFBRTtJQUMzQixNQUFNLGVBQWUsR0FBRyxDQUFDLGVBQW1DLEVBQUUsRUFBRTtRQUM1RCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUNoQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDLENBQUM7SUFFRixlQUFlLENBQUMsSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRTFELE9BQU8sSUFBSSxVQUFVLENBQUksUUFBUSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUNuQixDQUFDLENBQUMsRUFBRTtZQUNBLGVBQWUsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsQ0FBQyxFQUNELEdBQUcsQ0FBQyxFQUFFO1lBQ0YsZUFBZSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBRTdFLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxFQUNELEdBQUcsRUFBRTtZQUNELFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQ0osQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcGlQYWdpbmF0aW9uIHtcclxuICAgIHBhZ2U/OiBudW1iZXI7XHJcbiAgICBmaXJzdFBhZ2U/OiBib29sZWFuO1xyXG4gICAgbGFzdFBhZ2U/OiBib29sZWFuO1xyXG4gICAgcGFnZVNpemU/OiBudW1iZXI7XHJcbiAgICB0b3RhbEVsZW1lbnRzPzogbnVtYmVyO1xyXG4gICAgdG90YWxQYWdlcz86IG51bWJlcjtcclxuICAgIHNvcnQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvbjxUID0gYW55PiB7XHJcbiAgICBkYXRhOiBUW107XHJcbiAgICBwYWdpbmF0aW9uOiBBcGlQYWdpbmF0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZhaWx1cmVDb25maWcge1xyXG4gICAgcHJvcGVydGllczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIHRpdGxlPzogc3RyaW5nO1xyXG4gICAgc2Vjb25kPzogYm9vbGVhbjtcclxufVxyXG5cclxuZnVuY3Rpb24gZW1wdHkodjogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdiA9PT0gJycgfHwgKEFycmF5LmlzQXJyYXkodikgJiYgdi5sZW5ndGggPT09IDApIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsIHx8ICh0eXBlb2YgdiA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModikubGVuZ3RoID09PSAwKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRpbmdQcm9ncmVzczxUPiB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21EYXRhPFQ+KHZhbHVlOiBUKTogTG9hZGluZ1Byb2dyZXNzPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IExvYWRpbmdQcm9ncmVzczxUPih0cnVlLCB0cnVlLCBmYWxzZSwgdmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBpc0xvYWRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzTG9hZGVkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkYXRhOiBUIGV4dGVuZHMgUGFnaW5hdGlvbiA/IFRbJ2RhdGEnXSA6IFQ7XHJcbiAgICBwdWJsaWMgcGFnaW5hdGlvbjogQXBpUGFnaW5hdGlvbiB8IG51bGw7XHJcbiAgICBwdWJsaWMgaXNFbXB0eURhdGE6IGJvb2xlYW4gfCBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBpc0xvYWRlZDogYm9vbGVhbiA9IGZhbHNlLFxyXG4gICAgICAgIHB1YmxpYyBpc1N1Y2Nlc3M6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgICAgICBwdWJsaWMgaXNGYWlsdXJlOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgZGF0YT86IFQsXHJcbiAgICAgICAgcHVibGljIGZhaWx1cmVDb25maWc/OiBGYWlsdXJlQ29uZmlnXHJcbiAgICApIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNQYWdpbmF0aW9uKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEuZGF0YSBhcyBhbnk7XHJcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IGRhdGEucGFnaW5hdGlvbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIGFzIGFueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaXNFbXB0eURhdGEgPSBlbXB0eSh0aGlzLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZTxOPihwYXJhbXM6IHtcclxuICAgICAgICBpc0xvYWRlZD86IGJvb2xlYW4sXHJcbiAgICAgICAgaXNTdWNjZXNzPzogYm9vbGVhbixcclxuICAgICAgICBpc0ZhaWx1cmU/OiBib29sZWFuLFxyXG4gICAgICAgIGRhdGE6IE4sXHJcbiAgICAgICAgZmFpbHVyZUNvbmZpZz86IEZhaWx1cmVDb25maWdcclxuICAgIH0gPSB7fSBhcyBhbnkpOiBMb2FkaW5nUHJvZ3Jlc3M8Tj4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgTG9hZGluZ1Byb2dyZXNzKFxyXG4gICAgICAgICAgICBwYXJhbXMuaXNMb2FkZWQgfHwgdGhpcy5pc0xvYWRlZCxcclxuICAgICAgICAgICAgcGFyYW1zLmlzU3VjY2VzcyB8fCB0aGlzLmlzU3VjY2VzcyxcclxuICAgICAgICAgICAgcGFyYW1zLmlzRmFpbHVyZSB8fCB0aGlzLmlzRmFpbHVyZSxcclxuICAgICAgICAgICAgcGFyYW1zLmRhdGEsXHJcbiAgICAgICAgICAgIHBhcmFtcy5mYWlsdXJlQ29uZmlnIHx8IHRoaXMuZmFpbHVyZUNvbmZpZyxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFzUGFnaW5hdGlvbihkYXRhOiBQYWdpbmF0aW9uIHwgVCk6IGRhdGEgaXMgUGFnaW5hdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGEgIT09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEuaGFzT3duUHJvcGVydHkoJ3BhZ2luYXRpb24nKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRhdGFMb2FkaW5nID0gPFQ+KFxyXG4gICAgY2FsbGJhY2s6IChsb2FkaW5nUHJvZ3Jlc3M6IExvYWRpbmdQcm9ncmVzczxUPikgPT4gdm9pZCxcclxuICAgIGZhaWx1cmVDb25maWc/OiBGYWlsdXJlQ29uZmlnXHJcbikgPT4gKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT4ge1xyXG4gICAgY29uc3QgdHJ5Q2FsbENhbGxiYWNrID0gKGxvYWRpbmdQcm9ncmVzczogTG9hZGluZ1Byb2dyZXNzPFQ+KSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhsb2FkaW5nUHJvZ3Jlc3MpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdHJ5Q2FsbENhbGxiYWNrKG5ldyBMb2FkaW5nUHJvZ3Jlc3MoZmFsc2UsIGZhbHNlLCBmYWxzZSkpO1xyXG5cclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxUPihvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIHYgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5Q2FsbENhbGxiYWNrKG5ldyBMb2FkaW5nUHJvZ3Jlc3ModHJ1ZSwgdHJ1ZSwgZmFsc2UsIHYpKTtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnlDYWxsQ2FsbGJhY2sobmV3IExvYWRpbmdQcm9ncmVzcyh0cnVlLCBmYWxzZSwgdHJ1ZSwgbnVsbCwgZmFpbHVyZUNvbmZpZykpO1xyXG5cclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcbn07XHJcbiJdfQ==