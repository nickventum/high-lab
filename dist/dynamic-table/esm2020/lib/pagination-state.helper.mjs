export class PaginationStateHelper {
    constructor(range) {
        this.range = range;
        this.pageArray = [];
    }
    get isFirstPage() {
        return this.page === 1;
    }
    ;
    get isLastPage() {
        return this.page === this.pageCount;
    }
    ;
    setPage(value) {
        if (value < 1) {
            this.page = 1;
        }
        else if (value > this.pageCount) {
            this.page = this.pageCount;
        }
        else {
            this.page = value;
        }
        this.updateState();
        return this.page;
    }
    setPageCount(value) {
        if (value < 1) {
            this.pageCount = 1;
        }
        else {
            this.pageCount = value;
        }
        if (this.page > this.pageCount) {
            this.page = this.pageCount;
        }
        this.updateState();
    }
    prevPage() {
        if (!this.isFirstPage) {
            this.page--;
            this.updateState();
        }
        return this.page;
    }
    nextPage() {
        if (!this.isLastPage) {
            this.page++;
            this.updateState();
        }
        return this.page;
    }
    updateState() {
        this.pageArray = [];
        if (this.pageCount < this.range * 2 + 3) {
            for (let i = 1; i <= this.pageCount; i++) {
                this.pageArray.push({ isNumber: true, value: i });
            }
        }
        else if (this.page < this.range * 2 - 1) {
            for (let i = 1; i <= this.range * 2 + 1; i++) {
                this.pageArray.push({ isNumber: true, value: i });
            }
            this.pageArray.push({ isNumber: false, value: null });
            this.pageArray.push({ isNumber: true, value: this.pageCount });
        }
        else if (this.page > this.pageCount - this.range - 2) {
            this.pageArray.push({ isNumber: true, value: 1 });
            this.pageArray.push({ isNumber: false, value: null });
            for (let i = this.pageCount - this.range * 2; i <= this.pageCount; i++) {
                this.pageArray.push({ isNumber: true, value: i });
            }
        }
        else {
            this.pageArray.push({ isNumber: true, value: 1 });
            this.pageArray.push({ isNumber: false, value: null });
            for (let i = this.page - this.range + 1; i < this.page + this.range; i++) {
                this.pageArray.push({ isNumber: true, value: i });
            }
            this.pageArray.push({ isNumber: false, value: null });
            this.pageArray.push({ isNumber: true, value: this.pageCount });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,